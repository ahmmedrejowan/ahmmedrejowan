{
    "version": "https://jsonfeed.org/version/1",
    "title": "K M Rejowan Ahmmed",
    "description": "",
    "home_page_url": "https://cv.rejowan.com",
    "feed_url": "https://cv.rejowan.com/feed.json",
    "user_comment": "",
    "icon": "https://cv.rejowan.com/media/website/Untitled-design.png",
    "author": {
        "name": "K M Rejowan Ahmmed"
    },
    "items": [
        {
            "id": "https://cv.rejowan.com/licensy/",
            "url": "https://cv.rejowan.com/licensy/",
            "title": "Licensy",
            "summary": "Introduction Licensy is a handy Android library crafted in Kotlin. I always use opensouce libraries in all of my projects&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>Licensy is a handy Android library crafted in Kotlin. I always use opensouce libraries in all of my projects and I believe everyone does the same. In my projects I always try to put credits for the libraries or resources I use in my code. I looked for this type of library which will allow me to give the credits or add the licenses of the library in a proper manner for a long time. Guess what? I decided to create one.</p>\n<h2>Features</h2>\n<ol>\n<li>\n<p><strong>Lightweight and Highly Customizable Library:</strong> This library is lightweight and offers extensive customization options, allowing you to tailor it to your specific needs.</p>\n</li>\n<li>\n<p><strong>Versatile Usage:</strong> It can function as a view (LicensyView) and can be seamlessly integrated into various contexts such as activities, fragments, or dialogs, providing flexibility and convenience wherever it's required.</p>\n</li>\n<li>\n<p><strong>Dialog Functionality:</strong> You can utilize it as a Dialog (LicensyDialog), providing users with a familiar interface for interacting with licensing information.</p>\n</li>\n<li>\n<p><strong>BottomSheetDialog Integration:</strong> Additionally, it seamlessly integrates as a BottomSheetDialog (LicensyBottomSheet), ensuring a smooth and cohesive user experience.</p>\n</li>\n</ol>\n<h2>Demo</h2>\n<ul dir=\"auto\">\n<li>1 for Test app home</li>\n<li>2 for View</li>\n<li>3 for Dialog</li>\n<li>4 for BottomSheet</li>\n</ul>\n<p> </p>\n<p dir=\"auto\"><strong>Shots</strong></p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot1.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot1.png\" alt=\"Shot1\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot2.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot2.png\" alt=\"Shot2\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot3.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot3.png\" alt=\"Shot3\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot4.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/shot4.png\" alt=\"Shot4\" data-is-external-image=\"true\"></a></td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\"><strong>Animation </strong></p>\n<table style=\"width: 100%;\">\n<thead>\n<tr>\n<th style=\"width: 24.9643%;\">1</th>\n<th style=\"width: 24.9643%;\">2</th>\n<th style=\"width: 24.9643%;\">3</th>\n<th style=\"width: 24.9643%;\">4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"width: 24.9643%;\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim1.gif\" data-target=\"animated-image.originalLink\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim1.gif\" alt=\"Anim1\" data-target=\"animated-image.originalImage\" data-is-external-image=\"true\"></a></td>\n<td style=\"width: 24.9643%;\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim2.gif\" data-target=\"animated-image.originalLink\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim2.gif\" alt=\"Anim2\" data-target=\"animated-image.originalImage\" data-is-external-image=\"true\"></a></td>\n<td style=\"width: 24.9643%;\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim3.gif\" data-target=\"animated-image.originalLink\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim3.gif\" alt=\"Anim3\" data-target=\"animated-image.originalImage\" data-is-external-image=\"true\"></a></td>\n<td style=\"width: 24.9643%;\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim4.gif\" data-target=\"animated-image.originalLink\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/Licensy/master/files/anim4.gif\" alt=\"Anim4\" data-target=\"animated-image.originalImage\" data-is-external-image=\"true\"></a></td>\n</tr>\n</tbody>\n</table>\n<h2>Technologies Used</h2>\n<p>This library is entirely coded in Kotlin and XML. Android Studio serves as the primary Integrated Development Environment (IDE) for development.</p>\n<p>The source code is proudly hosted on GitHub.</p>\n<h2>Workflow</h2>\n<ol>\n<li><strong>Planning</strong>: I found some existing projects on GitHub on the same concept. I noted their flaws, shortcomings, the features they offer, and those they don't, but I think they should. Then I developed a plan in my head about what I'm going to do. </li>\n<li><strong>Draft UI</strong>: In Figma, I started planning the UI. It's a lot of text to put in a compact space. Finally, I got a draft and started coding. </li>\n<li><strong>Core Coding:</strong> After drafting, I started coding the skeleton in XML and then created the core code in Kotlin. I began with the View, then the dialog, and finally the Bottom Sheet Dialog. </li>\n<li><strong>Finalizing</strong>: Once the core functionality was established, I focused on fine-tuning the library. This involved dedicating time to incorporate additional tweaks and enhancements, ensuring optimal performance and usability before finalizing the project. </li>\n</ol>\n<h1>How to Use</h1>\n<p>First you need to add the dependency in your <code>build.gradle</code>  or <code>build.gradle.kts</code> and then just add the XML and Kotlin code. </p>\n<p><strong>Dependency</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>dependencies {\n    ...\n    implementation(\"com.github.ahmmedrejowan:Licensy:0.1\")\n}</code></pre>\n<p><strong>XML</strong></p>\n<pre class=\"language-html line-numbers\"><code>    &lt;com.rejowan.licensy.LicensyView\n        android:id=\"@+id/licensyView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" /&gt;</code></pre>\n<p><strong>Kotlin</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>    licensyView.setLicenses(listOfLicenses) // set the licenses to the view</code></pre>\n<pre class=\"language-kotlin line-numbers\"><code>data class LicenseContent(\n    val title: String,\n    val author: String,\n    val licenses: Licenses,\n    val copyrightYear: Int? = null,\n    val url: String? = null\n)</code></pre>\n<p><strong>Dialog</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>val licensyDialog = LicensyDialog(this)\nlicensyDialog.setLicenses(list)\nlicensyDialog.show()</code></pre>\n<p><strong>BottomSheetDialog</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>val licensyBottomSheet = LicensyBottomSheet(this)\nlicensyBottomSheet.setLicenses(list)\nlicensyBottomSheet.show()</code></pre>\n<p>You can find the whole documentation here - <a href=\"https://github.com/ahmmedrejowan/Licensy\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ahmmedrejowan/Licensy</a></p>\n<h2>What I've Learned</h2>\n<ul>\n<li>I have a deep appreciation for open-source projects, as they have been integral to my work. Utilizing libraries in all of my projects has been a common practice for me. Creating this particular library provided me with the opportunity to properly credit the hard work of those who have contributed to similar projects. It reinforced the importance of acknowledging and honoring the efforts of the open-source community.</li>\n</ul>\n<h2>Source Code </h2>\n<p>The source code and the whole project is available on GitHub. </p>\n<p>Repository Link - <a href=\"https://github.com/ahmmedrejowan/Licensy\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ahmmedrejowan/Licensy</a></p>\n<p>Repo Page - <a href=\"https://rejowan.com/Licensy/\" target=\"_blank\" rel=\"noopener noreferrer\">https://rejowan.com/Licensy/</a></p>\n<h2>Conclusion</h2>\n<p>In conclusion, embarking on the journey of creating an open-source library has been a fulfilling experience. Through meticulous planning, drafting UI, core coding, and finalizing, I've not only developed a valuable tool but also gained a deeper appreciation for the collaborative spirit of the open-source community. This project has allowed me to contribute back to this community that has been instrumental in my own work, while also providing a platform to properly credit and honor the efforts of others. It reinforces the notion that open-source projects are not just about code, but about fostering a culture of sharing, collaboration, and giving credit where it's due.</p>",
            "image": "https://cv.rejowan.com/media/posts/21/Licensy.svg",
            "author": {
                "name": "K M Rejowan Ahmmed"
            },
            "tags": [
                   "Android Library"
            ],
            "date_published": "2024-03-26T16:48:25+06:00",
            "date_modified": "2024-04-28T23:32:11+06:00"
        },
        {
            "id": "https://cv.rejowan.com/rotary-knob/",
            "url": "https://cv.rejowan.com/rotary-knob/",
            "title": "Rotary Knob",
            "summary": "Introduction Rotary Knob is a handy Android library crafted in Kotlin. It fills the gap where Android lacks a volume&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>Rotary Knob is a handy Android library crafted in Kotlin. It fills the gap where Android lacks a volume knob view. Existing solutions are often outdated and incomplete. Rotary Knob steps in to provide a simple, customizable, and well-maintained volume knob for Android developers. It's your go-to solution for adding intuitive volume controls to your apps, enhancing user experience effortlessly.</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p><strong>Rotational Functionality</strong>: Just like its name suggests, the Rotary Knob can rotate similar to a volume knob, operating in the same manner.</p>\n</li>\n<li>\n<p><strong>Highly Customizable</strong>: With several distinct styles available, users can tailor the Rotary Knob to suit their preferences. It offers more than 50 different customizable attributes accessible in both XML and Kotlin formats.</p>\n</li>\n<li>\n<p><strong>Two Visual Sets</strong>: The Rotary Knob presents users with two sets of visuals: one featuring lines and another showcasing circles, providing options to match various design preferences.</p>\n</li>\n<li>\n<p><strong>Lightweight Design</strong>: Utilizing only Canvas-Draw, the Rotary Knob maintains a lightweight profile. It avoids the use of drawables, contributing to efficient resource management.</p>\n</li>\n</ul>\n<h2>Demo</h2>\n<table>\n<thead>\n<tr>\n<th>Shots</th>\n<th>Shots</th>\n<th>Shots</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot1.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot1.png\" alt=\"Shot1\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot2.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot2.png\" alt=\"Shot2\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot3.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot3.png\" alt=\"Shot3\" data-is-external-image=\"true\"></a></td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot4.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot4.png\" alt=\"Shot4\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot5.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot5.png\" alt=\"Shot5\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot6.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/RotaryKnob/master/files/shot6.png\" alt=\"Shot6\" data-is-external-image=\"true\"></a></td>\n</tr>\n</tbody>\n</table>\n<h2>Technologies Used</h2>\n<p>This library is entirely coded in Kotlin, with additional assistance from XML for attribute creation. Android Studio serves as the primary Integrated Development Environment (IDE) for development.</p>\n<p>The source code is proudly hosted on GitHub.</p>\n<h2>Workflow</h2>\n<ol>\n<li>\n<p><strong>Planning</strong>: I began by researching various images of Volume Knobs online to gather inspiration for the design. After reviewing around 10-20 different styles, I formulated a plan. However, I soon realized that my initial plan needed adjustments, prompting me to refine it further.</p>\n</li>\n<li>\n<p><strong>Draft UI</strong>: Using Figma, I created multiple design concepts for the Rotary Knob. After careful consideration, I selected two distinct styles—one featuring circles and the other lines—as the primary visual representations.</p>\n</li>\n<li>\n<p><strong>Core Coding</strong>: The development process commenced with the core coding phase using Kotlin. Starting from the foundational structure, I progressively implemented the functionality, iteratively refining and expanding upon it to shape the Rotary Knob into its final form.</p>\n</li>\n<li>\n<p><strong>Finalizing</strong>: Once the core functionality was established, I focused on fine-tuning the library. This involved dedicating time to incorporate additional tweaks and enhancements, ensuring optimal performance and usability before finalizing the project.</p>\n</li>\n</ol>\n<h2>Problem and Solution</h2>\n<p><strong>Canvas Angle Dilemma</strong></p>\n<p><strong>Problem</strong>: Canvas drawing poses challenges with angles, particularly concerning the progression of the circle. Initially smooth, issues arose when implementing progress step drawing. The draw angle commenced anti-clockwise, contrary to the required clockwise direction. Furthermore, touch events presented angles in a convoluted manner, using both positive and negative degrees, exacerbating the complexity.</p>\n<p><strong>Solution</strong>: To address these challenges, I devised several adjustments. Firstly, I modified the angle obtained from OnTouchEvent by 90 degrees and added 360 if it was negative. This rectified discrepancies in angle representation. Secondly, I tackled the anti-clockwise drawing dilemma by subtracting from 360 degrees. Despite complexities arising from offsets in both start and end points, persistent experimentation and self-learning led to viable solutions. The scarcity of online resources for Canvas Draw necessitated a reliance on hands-on experimentation and personal learning.</p>\n<h1>How to Use</h1>\n<p>First you need to add the dependency in your <code>build.gradle</code>  or <code>build.gradle.kts</code> and then just add the XML and Kotlin code. </p>\n<p><strong>Dependency</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>dependencies {\n    ...\n    implementation(\"com.github.ahmmedrejowan:RotaryKnob:0.1\")\n}</code></pre>\n<p><strong>XML</strong></p>\n<pre class=\"language-html line-numbers\"><code>    &lt;com.rejowan.rotaryknob.RotaryKnob\n        android:id=\"@+id/rotaryKnob\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"250dp\"\n        android:layout_marginTop=\"20dp\" /&gt;\n</code></pre>\n<p><strong>Kotlin</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>\n        // listener for knob enable/disable\n        binding.rotaryKnob.knobEnableListener = object : RotaryKnob.OnKnobEnableListener {\n            override fun onKnobEnableChanged(isEnable: Boolean, progress: Int) {\n\n            }\n        }\n\n        // listener for knob progress change\n        binding.rotaryKnob.progressChangeListener = object : RotaryKnob.OnProgressChangeListener {\n            override fun onProgressChanged(progress: Int) {\n\n            }\n        }\n        \n        // set knob min, max and current progress\n        binding.rotaryKnob.currentProgress = 50\n        binding.rotaryKnob.min = 0\n        binding.rotaryKnob.max = 100\n</code></pre>\n<p>You can find the whole documentation here - <a href=\"https://github.com/ahmmedrejowan/RotaryKnob\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ahmmedrejowan/RotaryKnob</a></p>\n<h2>What I've Learned</h2>\n<ul>\n<li>Making this project required me to refresh my math knowledge. Even though it was tough, it helped me get better at creating custom views.</li>\n<li>I gained a lot of experience by creating a custom library with complicated features and designs. This taught me a lot about how to make libraries from scratch.</li>\n<li>When you really need something, you find new and creative ways to make it happen. This project challenged me to think outside the box, and that mindset will be useful for future projects.</li>\n</ul>\n<h2>Source Code </h2>\n<p>The source code and the whole project is available on GitHub. </p>\n<p>Repository Link - <a href=\"https://github.com/ahmmedrejowan/RotaryKnob\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ahmmedrejowan/RotaryKnob</a></p>\n<p>Repo Page - <a href=\"https://rejowan.com/RotaryKnob/\" target=\"_blank\" rel=\"noopener noreferrer\">https://rejowan.com/RotaryKnob/</a></p>\n<h2>Conclusion</h2>\n<p>In conclusion, working on this project taught me a lot. I improved my math skills and learned how to create custom views. Developing the library was a big experience, but it helped me understand complex functions better. I also realized that when you really need something, you find new ways to make it work. Overall, this project was a valuable learning experience that will help me in future projects.</p>",
            "image": "https://cv.rejowan.com/media/posts/20/RotaryKnob.svg",
            "author": {
                "name": "K M Rejowan Ahmmed"
            },
            "tags": [
                   "Android Library"
            ],
            "date_published": "2024-03-26T11:37:55+06:00",
            "date_modified": "2024-03-26T12:01:38+06:00"
        },
        {
            "id": "https://cv.rejowan.com/android-battery-view/",
            "url": "https://cv.rejowan.com/android-battery-view/",
            "title": "Android Battery View (ABV)",
            "summary": "Introduction This library was born out of necessity during the development of the Device Info app. I encountered the challenge&hellip;",
            "content_html": "<h2>Introduction</h2>\n<p>This library was born out of necessity during the development of the Device Info app. I encountered the challenge of presenting battery level and status in a graphical format, yet struggled to find a suitable option that was easy to implement. Despite discovering a few libraries on GitHub, none fulfilled all my requirements, and to my dismay, many were no longer maintained. Faced with this dilemma, I took matters into my own hands and developed Android Battery View (ABV).<br><br>ABV was created hastily, with plenty of room for improvement. However, it currently serves its purpose as is.</p>\n<h2>Features</h2>\n<p>This one has pretty straightfoward features. </p>\n<p><strong>Charge Level</strong></p>\n<ul>\n<li>Accurately displays the charge level from 1 to 100, with each level depicted on the canvas.</li>\n</ul>\n<p><strong>Stats</strong></p>\n<p>Includes four distinct stats:</p>\n<ul>\n<li><strong>Normal:</strong> Indicates discharging status.</li>\n<li><strong>Charging:</strong> Represents when the device is charging.</li>\n<li><strong>Warning:</strong> Indicates a low battery level, albeit not critically low.</li>\n<li><strong>Critical:</strong> Signals a critically low battery, prompting immediate action to find a charger.</li>\n</ul>\n<p><strong>Customization</strong></p>\n<p>Offers customization options:</p>\n<ul>\n<li>Ability to change the color for all four stats.</li>\n<li>Icons associated with charging, warning, and critical stats can be replaced with custom ones.</li>\n<li>Compatible with both portrait and landscape modes.</li>\n</ul>\n<p><strong>BroadcastReceiver</strong></p>\n<p>Enables attachment to a BroadcastReceiver intent:</p>\n<ul>\n<li>Automatically retrieves battery data from the intent, ensuring seamless integration.</li>\n</ul>\n<h2>Demo</h2>\n<table>\n<thead>\n<tr>\n<th>Normal</th>\n<th>Charging</th>\n<th>Warning</th>\n<th>Critical</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot1.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot1.png\" alt=\"Shot1\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot2.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot2.png\" alt=\"Shot2\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot3.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot3.png\" alt=\"Shot3\" data-is-external-image=\"true\"></a></td>\n<td><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot4.png\"><img loading=\"lazy\" src=\"https://raw.githubusercontent.com/ahmmedrejowan/AndroidBatteryView/master/files/shot4.png\" alt=\"Shot4\" data-is-external-image=\"true\"></a></td>\n</tr>\n</tbody>\n</table>\n<h2>Technologies Used</h2>\n<p>This library is entirely coded in Kotlin, with additional assistance from XML for attribute creation. Android Studio serves as the primary Integrated Development Environment (IDE) for development.</p>\n<p>The source code is proudly hosted on GitHub.</p>\n<h2>Workflow</h2>\n<ol>\n<li>\n<p><strong>Planning</strong>: I began by examining existing repositories to gather ideas on how I wanted the library to function. I meticulously noted the limitations of these projects and devised a plan based on these observations.</p>\n</li>\n<li>\n<p><strong>Draft UI</strong>: Utilizing Figma, I created initial drafts and collected the necessary icons required for the project.</p>\n</li>\n<li>\n<p><strong>Core Coding</strong>: The development process kicked off with the core coding phase in Kotlin. Starting from the basic structure, I gradually built upon it, shaping it into its final form.</p>\n</li>\n<li>\n<p><strong>Finalizing</strong>: With the core functionality in place, I dedicated time to refining the library, incorporating additional tweaks and enhancements to ensure its optimal performance and usability.</p>\n</li>\n</ol>\n<h2>Problem and Solution</h2>\n<p><strong>Canvas Resources</strong></p>\n<p><strong>Problem: </strong>There is a scarcity of resources available on canvas manipulation. While some outdated tutorials exist, they often lack depth and fail to address advanced topics. Consequently, encountering obstacles during development proved challenging, with few avenues for finding solutions beyond basic documentation.</p>\n<p><strong>Solution</strong>: In the face of this challenge, I adopted a hands-on approach. Testing various theories and techniques, I delved into the intricacies of canvas manipulation. Through perseverance and experimentation, I uncovered solutions to the obstacles encountered along the way. Embracing the age-old tactic of brute-force problem-solving, I navigated through the complexities, ultimately overcoming the limitations imposed by the lack of comprehensive resources.</p>\n<h1>How to Use</h1>\n<p>First you need to add the dependency in your <code>build.gradle</code>  or <code>build.gradle.kts</code> and then just add the XML and Kotlin code. </p>\n<p><strong>Dependency</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>dependencies {\n    ...\n    implementation(\"com.github.ahmmedrejowan:AndroidBatteryView:0.1\")\n}</code></pre>\n<p><strong>XML</strong></p>\n<pre class=\"language-html line-numbers\"><code>&lt;com.rejowan.abv.ABV\n    android:id=\"@+id/abv\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:abvBatteryOrientation=\"portrait\"\n    app:abvRadius=\"10\"\n    app:abvSize=\"50\"/&gt;\n</code></pre>\n<p><strong>Kotlin</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>val abv = binding.abv\nabv.size = 50\nabv.mRadius = 10f\nabv.chargeLevel = 50\nabv.batteyOrientation = BatteryOrientation.PORTRAIT\nabv.isCharging = false</code></pre>\n<p><strong>Broadcast Receiver</strong></p>\n<pre class=\"language-kotlin line-numbers\"><code>class MainActivity : AppCompatActivity() {\n\n    private val binding: ActivityMainBinding by lazy {ActivityMainBinding.inflate(layoutInflater)}\n\n    private val batteryReceiver: BroadcastReceiver = object : BroadcastReceiver() {\n        override fun onReceive(context: Context?, intent: Intent?) {\n            if (intent!=null){\n                binding.abv.attachBatteryIntent(intent)\n            }\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(binding.root)\n        registerReceiver(batteryReceiver, IntentFilter(Intent.ACTION_BATTERY_CHANGED))\n\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        unregisterReceiver(batteryReceiver)\n    }\n}</code></pre>\n<p>You can find the whole documentation here - <a href=\"https://github.com/ahmmedrejowan/AndroidBatteryView\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ahmmedrejowan/AndroidBatteryView</a></p>\n<h2>What I've Learned</h2>\n<ul>\n<li>Developing a solution from scratch requires confronting unfamiliar territories and embracing challenges with an open mind. This experience has made me more receptive to encountering and overcoming new obstacles in future projects.</li>\n<li>The project provided an opportunity to delve deeper into the Android Canvas, enhancing my understanding and proficiency in this area. Experimentation and hands-on exploration have facilitated a more comprehensive grasp of canvas manipulation techniques and capabilities.</li>\n<li>Necessity often drives innovation. By venturing into uncharted territory, I've honed my ability to think creatively and devise novel solutions to complex problems. This mindset of innovation will undoubtedly prove beneficial in tackling future projects.</li>\n</ul>\n<h2>Source Code </h2>\n<p>The source code and the whole project is available on GitHub. </p>\n<p>Repository Link - <a href=\"https://github.com/ahmmedrejowan/AndroidBatteryView\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ahmmedrejowan/AndroidBatteryView</a></p>\n<p>Repo Page - <a href=\"https://rejowan.com/AndroidBatteryView/\" target=\"_blank\" rel=\"noopener noreferrer\">https://rejowan.com/AndroidBatteryView</a></p>\n<h2>Conclusion</h2>\n<p>In conclusion, the process of developing this new solution has been a journey of challenges and learning. Through experimentation and perseverance, I've expanded my knowledge of Android Canvas and cultivated a mindset of innovation. While there were obstacles along the way, overcoming them has equipped me with valuable skills and experiences for future projects.</p>\n<p> </p>",
            "image": "https://cv.rejowan.com/media/posts/19/Android-Battery-View.svg",
            "author": {
                "name": "K M Rejowan Ahmmed"
            },
            "tags": [
                   "Android Library"
            ],
            "date_published": "2024-03-25T18:22:23+06:00",
            "date_modified": "2024-03-26T11:35:10+06:00"
        },
        {
            "id": "https://cv.rejowan.com/device-info/",
            "url": "https://cv.rejowan.com/device-info/",
            "title": "Device Info - Hardware Info",
            "summary": "Introduction Introducing Device Info, my latest Android app! After trying out a bunch of device information apps, I got curious&hellip;",
            "content_html": "<h2><strong>Introduction</strong></h2>\n<p>Introducing Device Info, my latest Android app! After trying out a bunch of device information apps, I got curious about how they work. That led me to think, \"Why not make one myself?\"</p>\n<p>So, I used Kotlin and a bit of Java, plus some basic XML design, to create my own. Before diving in, I checked out similar apps to see what features I liked. Then, I made a list of what I wanted in my app. My main goal? To make it super easy to use and give you all the info you need about your device.</p>\n<p>It took about a month to finish everything – planning, designing, building, and testing. But now, Device Info is good to go! It's been quite the journey, and I'm excited to share it with you.</p>\n<p>Device Info isn't just another app. It's the product of my passion for making something useful and user-friendly. So, let's jump in together and explore your Android device like never before!</p>\n<h2>Features</h2>\n<p>The app consists of five main components that work together to provide a seamless user experience. </p>\n<p><strong>Dashboard</strong></p>\n<ul>\n<li><strong>At-a-Glance Insights</strong>: Get a quick overview of your device’s most crucial information, all presented on a beautifully designed dashboard.</li>\n</ul>\n<p><strong>Detailed Information</strong></p>\n<ul>\n<li><strong>Component Breakdown</strong>: Explore in-depth details of your device’s CPU, GPU, OS, Display, RAM, Storage, Battery, and more.</li>\n<li><strong>Connectivity and Network</strong>: Understand your device’s network capabilities, including Wi-Fi, Bluetooth, and NFC connections.</li>\n</ul>\n<p><strong>Real-Time Monitoring</strong></p>\n<ul>\n<li><strong>Performance Metrics</strong>: Monitor real-time data on CPU and RAM usage, as well as battery health, to keep your device running smoothly.</li>\n</ul>\n<p><strong>App Management</strong></p>\n<ul>\n<li><strong>Comprehensive App Lists</strong>: Manage both installed and system apps, sorted by name, size, and installation date, with detailed pages for each app.</li>\n</ul>\n<p><strong>Hardware Testing</strong></p>\n<ul>\n<li><strong>Interactive Tests</strong>: Verify the functionality of your device’s hardware, including multi-touch, flash, speaker, microphone, and various sensors.</li>\n</ul>\n<h2>Technologies Used</h2>\n<p><strong>Programming Languages</strong></p>\n<ul>\n<li><strong>Java &amp; Kotlin</strong>: For robust and efficient app development.</li>\n<li><strong>XML</strong>: To craft the user interface with precision.</li>\n</ul>\n<p><strong>Database</strong></p>\n<ul>\n<li><strong>SQLite</strong>: For reliable local data storage and management.</li>\n</ul>\n<p><strong>Design Architecture</strong></p>\n<ul>\n<li><strong>MVVM (Model-View-ViewModel)</strong>: Ensures a clean separation of concerns and an organized codebase.</li>\n</ul>\n<p><strong>Integrated Development Environment (IDE)</strong></p>\n<ul>\n<li><strong>Android Studio</strong>: The official IDE for Android development, providing a comprehensive suite of tools for building apps.</li>\n</ul>\n<p><strong>Design Tools</strong></p>\n<ul>\n<li><strong>Figma</strong>: Utilized for high-fidelity UI/UX design and prototyping.</li>\n</ul>\n<p><strong>Libraries</strong></p>\n<ul>\n<li><strong><a href=\"https://github.com/airbnb/lottie-android\" target=\"_blank\" rel=\"noopener noreferrer\">Lottie</a></strong>: For adding high-quality animations to the app.</li>\n<li><strong><a href=\"https://github.com/InsertKoinIO/koin\" target=\"_new\">Koin</a>:</strong> A pragmatic lightweight dependency injection framework.</li>\n<li><strong><a href=\"https://github.com/google/gson\" target=\"_new\">Gson</a></strong>: For parsing and serializing JSON data efficiently.</li>\n<li><strong><a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_new\">MPAndroidChart</a></strong>: For rendering complex charts and graphs.</li>\n<li><strong><a href=\"https://github.com/bumptech/glide\" target=\"_new\">Glide</a></strong>: For efficient image loading and caching.</li>\n<li><strong><a href=\"https://github.com/ahmmedrejowan/AndroidBatteryView\">AndroidBatteryView</a></strong>: A custom library created specifically for displaying battery information.</li>\n</ul>\n<p><strong>Version Control</strong></p>\n<ul>\n<li><strong>GitHub</strong>: Used for source code management, allowing for collaborative development and version tracking.</li>\n</ul>\n<p><strong>Analytics</strong></p>\n<ul>\n<li><strong>Firebase</strong>: Provides insights into app usage and user engagement.</li>\n</ul>\n<h2>Workflow</h2>\n<ol>\n<li>\n<p><strong>Research and Planning</strong>: I began by exploring existing device information apps to understand their features and user experiences. This helped me identify what I wanted to include in my own app and any potential improvements I could make.</p>\n</li>\n<li>\n<p><strong>UI Drafting</strong>: With a clear idea of the features, I sketched out drafts of the user interface. As a developer, I find that starting with drafts allows for flexibility, especially when you’re unsure about the extent of information you can access.</p>\n</li>\n<li>\n<p><strong>Coding the Core</strong>: I dove into coding with the MVVM architecture, focusing on fetching various device details such as CPU, GPU, and battery information. This structure allowed me to build the app piece by piece, ensuring each part was fully functional.</p>\n</li>\n<li>\n<p><strong>Design Iteration</strong>: As I obtained the necessary information for each section, I refined the UI design for that particular part. This iterative process meant that the design evolved alongside the app’s capabilities.</p>\n</li>\n<li>\n<p><strong>Bringing it All Together</strong>: Step by step, I integrated all planned features, ensuring that each element worked harmoniously within the app. The result was a cohesive and informative user experience.</p>\n</li>\n</ol>\n<h2>Problem and Solution</h2>\n<ul>\n<li><strong>Device Name</strong></li>\n</ul>\n<p><strong>Problem:</strong> The Android SDK does not provide the market name of devices, only the model name given by the manufacturer, which can be unfamiliar to users.</p>\n<p><strong>Solution:</strong> To address this, I compiled a comprehensive list of all Android devices from the official Supported Devices page. From this list, I created a SQLite database, allowing me to query the market device name using the manufacturer’s model name. This ensures users can identify their devices with the names they’re accustomed to.</p>\n<ul>\n<li><strong>Brand Icon</strong></li>\n</ul>\n<p><strong>Problem:</strong> Displaying the brand of a device in a visually appealing way can be challenging due to the variety of brands and associated icons.</p>\n<p><strong>Solution:</strong> I developed a custom module containing icons for different device brands. This module can be easily integrated into the app, providing a consistent and recognizable visual representation of the device’s brand.</p>\n<ul>\n<li><strong>Android Icons</strong></li>\n</ul>\n<p><strong>Problem:</strong> Similar to brand icons, there’s a need for a uniform set of Android icons that represent various device features and specifications.</p>\n<p><strong>Solution:</strong> Utilizing the approach taken with the brand icons, I created a custom module for Android icons. This module includes a curated selection of icons that represent the Android platform, enhancing the user interface with familiar and intuitive graphics.</p>\n<ul>\n<li><strong>CPU and GPU Information</strong></li>\n</ul>\n<p><strong>Problem:</strong> The Android SDK does not provide detailed information about the CPU and GPU, such as the market name or specific core details. For example, while the CPU model might be listed as SM7325, it doesn’t reveal that this corresponds to the Snapdragon 778G.</p>\n<p><strong>Solution:</strong> To overcome this, I scraped a list of all system-on-chips for Android devices and created a SQLite database with comprehensive details. Now, by querying the database with the CPU model, users can retrieve the full specifications, including the market name, fabrication details, and individual core information.</p>\n<ul>\n<li><strong>SDK Limitations</strong></li>\n</ul>\n<p><strong>Problem:</strong> Many hardware details are not readily available through the Android SDK, necessitating direct reading of Linux kernel files to obtain necessary information.</p>\n<p><strong>Solution:</strong> By delving into the Linux kernel files, I extracted the required data that the SDK does not provide. This approach has enabled the app to present a more complete picture of the device’s hardware.</p>\n<ul>\n<li><strong>Realtime Charting</strong></li>\n</ul>\n<p><strong>Problem:</strong> The MP Android Chart library does not support realtime chart updates by default, which is essential for displaying dynamic data.</p>\n<p><strong>Solution:</strong> With some creative adjustments and technical tweaks, I managed to enable realtime updates on the charts. This allows the app to display data that changes in real-time, enhancing the user experience.</p>\n<ul>\n<li><strong>Battery View</strong></li>\n</ul>\n<p><strong>Problem:</strong> There was no suitable solution available to display current battery information as a dynamic view or icon that changes according to the battery’s charge level and state.</p>\n<p><strong>Solution:</strong> I developed ‘Android Battery View,’ a custom view extending the Android View class, to dynamically represent the battery’s status. This custom view changes its appearance based on the battery level and can be found on my GitHub repository: <a href=\"https://github.com/ahmmedrejowan/AndroidBatteryView\">Android Battery View</a>.</p>\n<h2>Screenshots</h2>\n<table style=\"border-collapse: collapse; width: 99.8575%; height: 1069.94px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 524.969px;\">\n<td style=\"width: 33.3809%; height: 524.969px;\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://cv.rejowan.com/media/posts/18/Screenshot_2024-03-02-18-08-22-92_29708645a0dcb3a9e27e2a33962bed9f.jpg\" alt=\"\" width=\"400\" height=\"889\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-22-92_29708645a0dcb3a9e27e2a33962bed9f-xs.jpg 320w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-22-92_29708645a0dcb3a9e27e2a33962bed9f-sm.jpg 480w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-22-92_29708645a0dcb3a9e27e2a33962bed9f-md.jpg 768w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-22-92_29708645a0dcb3a9e27e2a33962bed9f-xl.jpg 1024w\"></figure></td>\n<td style=\"width: 33.3809%; height: 524.969px;\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://cv.rejowan.com/media/posts/18/Screenshot_2024-03-02-18-08-25-80_29708645a0dcb3a9e27e2a33962bed9f.jpg\" alt=\"\" width=\"400\" height=\"889\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-25-80_29708645a0dcb3a9e27e2a33962bed9f-xs.jpg 320w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-25-80_29708645a0dcb3a9e27e2a33962bed9f-sm.jpg 480w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-25-80_29708645a0dcb3a9e27e2a33962bed9f-md.jpg 768w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-25-80_29708645a0dcb3a9e27e2a33962bed9f-xl.jpg 1024w\"></figure></td>\n<td style=\"width: 33.3809%; height: 524.969px;\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://cv.rejowan.com/media/posts/18/Screenshot_2024-03-02-18-08-33-13_29708645a0dcb3a9e27e2a33962bed9f-2.jpg\" alt=\"\" width=\"400\" height=\"889\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-33-13_29708645a0dcb3a9e27e2a33962bed9f-2-xs.jpg 320w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-33-13_29708645a0dcb3a9e27e2a33962bed9f-2-sm.jpg 480w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-33-13_29708645a0dcb3a9e27e2a33962bed9f-2-md.jpg 768w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-33-13_29708645a0dcb3a9e27e2a33962bed9f-2-xl.jpg 1024w\"></figure></td>\n</tr>\n<tr style=\"height: 544.969px;\">\n<td style=\"width: 33.3809%; height: 544.969px;\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://cv.rejowan.com/media/posts/18/Screenshot_2024-03-02-18-08-37-24_29708645a0dcb3a9e27e2a33962bed9f.jpg\" alt=\"\" width=\"400\" height=\"889\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-37-24_29708645a0dcb3a9e27e2a33962bed9f-xs.jpg 320w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-37-24_29708645a0dcb3a9e27e2a33962bed9f-sm.jpg 480w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-37-24_29708645a0dcb3a9e27e2a33962bed9f-md.jpg 768w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-37-24_29708645a0dcb3a9e27e2a33962bed9f-xl.jpg 1024w\"></figure></td>\n<td style=\"width: 33.3809%; height: 544.969px;\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://cv.rejowan.com/media/posts/18/Screenshot_2024-03-02-18-08-40-38_29708645a0dcb3a9e27e2a33962bed9f.jpg\" alt=\"\" width=\"400\" height=\"889\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-40-38_29708645a0dcb3a9e27e2a33962bed9f-xs.jpg 320w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-40-38_29708645a0dcb3a9e27e2a33962bed9f-sm.jpg 480w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-40-38_29708645a0dcb3a9e27e2a33962bed9f-md.jpg 768w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-40-38_29708645a0dcb3a9e27e2a33962bed9f-xl.jpg 1024w\"></figure></td>\n<td style=\"width: 33.3809%; height: 544.969px;\"><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://cv.rejowan.com/media/posts/18/Screenshot_2024-03-02-18-08-42-74_29708645a0dcb3a9e27e2a33962bed9f.jpg\" alt=\"\" width=\"400\" height=\"889\" sizes=\"(min-width: 760px) 660px, calc(93.18vw - 30px)\" srcset=\"https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-42-74_29708645a0dcb3a9e27e2a33962bed9f-xs.jpg 320w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-42-74_29708645a0dcb3a9e27e2a33962bed9f-sm.jpg 480w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-42-74_29708645a0dcb3a9e27e2a33962bed9f-md.jpg 768w ,https://cv.rejowan.com/media/posts/18/responsive/Screenshot_2024-03-02-18-08-42-74_29708645a0dcb3a9e27e2a33962bed9f-xl.jpg 1024w\"></figure></td>\n</tr>\n</tbody>\n</table>\n<h2>Demo</h2>\n<p>Here is an APK for testing the Device Info app. </p>\n<p><strong><a href=\"https://cv.rejowan.com/media/files/Device Info.apk\" title=\"Download Now\">Download Now</a></strong></p>\n<h2>What I’ve Learned</h2>\n<p>Throughout the development of this project, my journey was as much about discovery as it was about creation. Here are some key insights I gained:</p>\n<ul>\n<li>\n<p><strong>Understanding Android Devices</strong>: I delved deep into the intricacies of Android devices, unraveling the layers that users interact with daily. This exploration gave me a profound appreciation for the complexity and sophistication of modern mobile devices.</p>\n</li>\n<li>\n<p><strong>System Insights</strong>: I learned how Android’s underlying system operates, where data is meticulously stored, and how it’s retrieved to provide a seamless user experience.</p>\n</li>\n<li>\n<p><strong>App Ecosystem</strong>: Observing how other applications function within the same ecosystem broadened my perspective on designing apps that play well with others, ensuring compatibility and efficiency.</p>\n</li>\n<li>\n<p><strong>Linux Kernel Structure</strong>: The Linux kernel is the bedrock upon which Android stands. Understanding its structure was like learning a new language that, once mastered, allowed me to communicate more effectively with the device’s core.</p>\n</li>\n<li>\n<p><strong>Version Variations</strong>: With each new Android version, changes abound. I learned to navigate these changes, adapting to new information structures and system behaviors.</p>\n</li>\n<li>\n<p><strong>Cross-Version Compatibility</strong>: Ensuring that an app remains functional across different versions of Android was a challenge that taught me the importance of forward-thinking and adaptability in software development.</p>\n</li>\n</ul>\n<h2>Source Code</h2>\n<p>The source is open and hosted on GitHub under Apache 2.0 License. </p>\n<p>Have a look at - <a href=\"https://github.com/ahmmedrejowan/DeviceInfo\">https://github.com/ahmmedrejowan/DeviceInfo</a></p>\n<h2>Conclusion</h2>\n<p>This journey through the development of my Android application has been both challenging and rewarding. It pushed the boundaries of my understanding of Android devices, their operating systems, and the underlying Linux kernel. The solutions I crafted not only solved the immediate problems but also contributed to a broader knowledge base that can assist others facing similar challenges.</p>\n<p>As I continue to explore the vast landscape of mobile development, I remain committed to learning, sharing, and improving. Whether it’s through closed-source ventures that push technological limits or open-source contributions that foster community growth, the adventure never ceases.</p>\n<p>Thank you for following along with this project’s story. May it inspire your own path of discovery and innovation in the world of technology.</p>",
            "image": "https://cv.rejowan.com/media/posts/18/Device-Info-2.svg",
            "author": {
                "name": "K M Rejowan Ahmmed"
            },
            "tags": [
                   "Android App"
            ],
            "date_published": "2024-03-07T18:00:13+06:00",
            "date_modified": "2024-03-29T23:48:07+06:00"
        }
    ]
}
